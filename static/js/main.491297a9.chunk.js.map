{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Charts/Charts.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","App.module.css","components/Charts/Charts.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","duration","end","value","separator","Date","toDateString","url","fetchData","country","a","changeable","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchcountries","countries","name","Charts","useState","setDailyData","useEffect","fetchAPI","intialData","lineChart","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setfetchcountries","FormControl","formControl","NativeSelect","default","onChange","e","target","i","key","App","props","fetchedData","setState","state","data1","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.491297a9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import React  from 'react'; \nimport {Card,CardContent,Typography,Grid} from '@material-ui/core';\nimport CountUp from 'react-countup';\nimport styles from './Cards.module.css';  \nimport cx from 'classnames';\n\nfunction Cards({data:{ confirmed, recovered, deaths, lastUpdate }} ) {\n   if(!confirmed)\n   {\n       return  (\n           <div>loading</div>\n       );\n   }\n   else  \n   {\n    return (\n        <div className={styles.container}>\n        <Grid container spacing={3} justify=\"center\">\n            <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.infected)}>\n                <CardContent>\n                    <Typography color=\"textSecondary\" gutterBottom variant=\"h5\">\n                        <CountUp duration={5} end={confirmed.value} separator=\",\" />\n                     <Typography color=\"textSecondary\" >{new Date(lastUpdate).toDateString()}</Typography>\n                    </Typography>\n                 \n                    <Typography variant=\"body2\">Number of active cases of COVID-19</Typography>\n                </CardContent>\n            </Grid>\n            <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.recovered)}>\n                <CardContent>\n                    <Typography color=\"textSecondary\" gutterBottom variant=\"h5\">\n                    <CountUp duration={5} end={recovered.value} separator=\",\" />\n                    </Typography>\n                    <Typography color=\"textSecondary\" >{new Date(lastUpdate).toDateString()}</Typography>\n                    \n                    <Typography variant=\"body2\">Number of recoveries cases of COVID-19</Typography>\n                </CardContent>\n            </Grid>\n            <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.deaths)}>\n                <CardContent>\n                    <Typography color=\"textSecondary\" gutterBottom variant=\"h5\">\n                    <CountUp duration={5} end={deaths.value} separator=\",\" />\n                    <Typography color=\"textSecondary\" >{new Date(lastUpdate).toDateString()}</Typography>\n                    </Typography>\n                     \n                    <Typography variant=\"body2\">Number of death caused by  COVID-19</Typography>\n                </CardContent>\n            </Grid>\n        </Grid>\n    </div>\n    )\n    }\n}\n\nexport default Cards\n","import axios from 'axios'; \n \nconst url ='https://covid19.mathdro.id/api'; \n\nexport const fetchData = async (country) => \n{\n  let changeable = url;\n  if(country)\n  {\n    changeable = `${url}/countries/${country}`;\n  }\n    try {\n        const {data : {confirmed,recovered,deaths,lastUpdate}} = await axios.get(changeable); \n       \n        return {confirmed,recovered,deaths,lastUpdate}; \n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const fetchDailyData = async() => {\n    try {\n      const {data} = await axios.get(`${url}/daily`);\n      const modifiedData = data.map((dailyData) => ({\n        confirmed:dailyData.confirmed.total, \n        deaths:dailyData.deaths.total,\n        date:dailyData.reportDate,\n      }));\n\n      return modifiedData;\n    } catch (error) {\n        \n    }\n} \n\nexport const fetchcountries = async() => {\n  try {\n    const {data:{countries}}=await axios.get(`${url}/countries`); \n    return countries.map((countries) => countries.name);\n  } catch (error) {\n    console.log(error);\n  }\n}","import React,{useState,useEffect} from 'react'; \nimport { fetchDailyData } from '../../api';\nimport { Line,Bar} from 'react-chartjs-2';\n  \n\nimport styles from './Charts.module.css';\n\nconst Charts =({data:{confirmed,recovered,deaths,lastUpdate},country}) =>\n{\n    const [dailyData,setDailyData] = useState([]);// Empty Array\n    useEffect(()=>{\n        const fetchAPI = async () => {\n            const intialData=await fetchDailyData(); \n            setDailyData(intialData);\n        }; \n        console.log(dailyData);\n        fetchAPI(); \n    },[setDailyData]);\n    const lineChart = (\n      dailyData[0] ? (\n        <Line\n          data={{\n            labels: dailyData.map(({ date }) => date),\n            datasets: [{\n              data: dailyData.map((data) => data.confirmed),\n              label: 'Infected',\n              borderColor: '#3333ff',\n              fill: true,\n            }, \n            \n            {\n              data: dailyData.map((data) => data.deaths),\n              label: 'Deaths',\n              borderColor: 'red',\n              backgroundColor: 'rgba(255, 0, 0, 0.5)',\n              fill: true,\n            },\n            ],\n          }}\n        />\n      ) : null\n    );\n    const barChart = (\n      confirmed ? (\n        <Bar\n          data={{\n            labels: ['Infected', 'Recovered', 'Deaths'],\n            datasets: [\n              {\n                label: 'People',\n                backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\n                data: [confirmed.value, recovered.value, deaths.value],\n              },\n            ],\n          }}\n          options={{\n            legend: { display: false },\n            title: { display: true, text: `Current state in ${country}` },\n          }}\n        />\n      ) : null\n    );\n     \n    return (\n   \n        <div className={styles.container}>\n            {\n                country?barChart:lineChart\n            }       \n            \n        </div>\n     \n    )\n}\n\nexport default Charts;","import React,{useState,useEffect} from 'react'; \nimport {NativeSelect,FormControl} from '@material-ui/core';\nimport styles from './CountryPicker.module.css';\nimport {fetchcountries} from '../../api';\n\nconst CountryPicker =({handleCountryChange}) =>{\n    const [fetchedCountries,setfetchcountries] = useState([]);\n    useEffect(()=>\n    {\n       const fetchAPI = async () =>{\n        setfetchcountries(await fetchcountries());\n       }\n       fetchAPI();   \n    },[setfetchcountries]);\n    console.log(fetchedCountries);\n    return (\n         <FormControl className={styles.formControl}>\n             <NativeSelect default=\"\" onChange={(e)=> handleCountryChange(e.target.value)}>\n                 <option value=\"global\">Global</option>\n                {fetchedCountries.map((country,i) => <option value={country} key={i}>{country}</option>)}\n             </NativeSelect>\n         </FormControl>\n    )\n}\n\nexport default CountryPicker;","import React from 'react';\nimport styles from './App.module.css';\nimport {Cards,Charts,CountryPicker} from './components'; \nimport { fetchData } from './api/'; \n\n\nclass App extends React.Component\n{  \n   constructor(props) {\n     super(props)\n   \n     this.state = {\n        data:{},\n        country:'',       \n     }\n   }\n   \n  \n  async componentDidMount() \n  {\n    const data1 = await fetchData();\n    // console.log(data1);\n    this.setState({ data:data1 });\n    console.log(this.state);\n    /// printed once   \n  }\n  handleCountryChange = async (country) => {\n    // fetch the data\n    const fetchedData = await fetchData(country);\n      // set the data   \n    this.setState({ data:fetchedData,country:country });\n  }\n  render() \n  {\n    const {data,country} = this.state;\n    // console.log(this.state);\n      return (\n        <div className={styles.container} >\n          \n          <Cards data={data} /> \n          <CountryPicker handleCountryChange={this.handleCountryChange} />\n          <Charts data={data} country={country}/>       \n        </div>\n      );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App /> ,  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Charts_container__1mZfu\"};"],"sourceRoot":""}